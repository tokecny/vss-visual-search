{"ast":null,"code":"// This file is module for offline service such as save file, read file, etc with local storage or indexedDB.\n// Author : Waragon P.\n\nfunction saveDataToLocalStorage(key, value) {\n  localStorage.setItem(key, value);\n}\nfunction getDataFromLocalStorage(key) {\n  return localStorage.getItem(key);\n}\nfunction saveDataToIndexedDB(data, DBname) {\n  // Create request to open a indexed database\n  const IDBrequest = window.indexedDB.open(DBname);\n\n  // If error\n  IDBrequest.onerror = function (event) {\n    console.log(\"IndexedDB error: \" + event.target.errorCode);\n  };\n\n  // If upgrade needed\n  IDBrequest.onupgradeneeded = function (event) {\n    const db = IDBrequest.result;\n    if (!db.objectStoreNames.contains(\"data\")) {\n      db.createObjectStore(\"data\");\n    }\n  };\n\n  // If success\n  IDBrequest.onsuccess = function (event) {\n    const db = IDBrequest.result;\n    const transaction = db.transaction([\"data\"], \"readwrite\");\n    const objectStore = transaction.objectStore(\"data\");\n    const request = objectStore.add(data, new Date().getTime());\n    request.onsuccess = function (event) {\n      console.log(\"Data has been added to your database.\");\n    };\n    transaction.oncomplete = function (event) {\n      db.close();\n    };\n  };\n}\nfunction getDataFromIndexedDB(DBname, DBversion, DBstore) {\n  // Create request to open a indexed database\n  const IDBrequest = window.indexedDB.open(DBname, DBversion);\n\n  // If error\n  IDBrequest.onerror = function (event) {\n    console.log(\"IndexedDB error: \" + event.target.errorCode);\n  };\n\n  // If success\n  IDBrequest.onsuccess = function (event) {\n    const db = IDBrequest.result;\n    const transaction = db.transaction([DBstore], \"readwrite\");\n    const objectStore = transaction.objectStore(DBstore);\n    const request = objectStore.getAll();\n    request.onsuccess = function (event) {\n      console.log(\"Data has been added to your database.\");\n    };\n    transaction.oncomplete = function (event) {\n      db.close();\n    };\n  };\n}\nfunction saveDataToClientDevice(data, filename) {\n  const blob = new Blob([data], {\n    type: 'text/plain'\n  });\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.setAttribute('download', filename);\n  a.setAttribute('href', url);\n  a.click();\n}\nfunction saveJSONDataToClientDevice(data, filename) {\n  saveDataToClientDevice(JSON.stringify(data), filename);\n}\nexport { saveDataToLocalStorage, saveDataToIndexedDB, saveDataToClientDevice, saveJSONDataToClientDevice, getDataFromLocalStorage, getDataFromIndexedDB };","map":{"version":3,"names":["saveDataToLocalStorage","key","value","localStorage","setItem","getDataFromLocalStorage","getItem","saveDataToIndexedDB","data","DBname","IDBrequest","window","indexedDB","open","onerror","event","console","log","target","errorCode","onupgradeneeded","db","result","objectStoreNames","contains","createObjectStore","onsuccess","transaction","objectStore","request","add","Date","getTime","oncomplete","close","getDataFromIndexedDB","DBversion","DBstore","getAll","saveDataToClientDevice","filename","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","setAttribute","click","saveJSONDataToClientDevice","JSON","stringify"],"sources":["/Users/pavlov/Documents/GitHub/vss-visual-search/src/uitls/offline.ts"],"sourcesContent":["// This file is module for offline service such as save file, read file, etc with local storage or indexedDB.\n// Author : Waragon P.\n\nfunction saveDataToLocalStorage(key:string, value:any) {\n    localStorage.setItem(key, value);\n}\n\nfunction getDataFromLocalStorage(key:string) {\n    return localStorage.getItem(key);\n}\n\n\nfunction saveDataToIndexedDB(data:any, DBname:string) {\n    // Create request to open a indexed database\n    const IDBrequest: IDBOpenDBRequest = window.indexedDB.open(DBname);\n  \n    // If error\n    IDBrequest.onerror = function(event) {\n        console.log(\"IndexedDB error: \" + (event.target as any).errorCode);\n    };\n  \n    // If upgrade needed\n    IDBrequest.onupgradeneeded = function(event) {\n        const db = IDBrequest.result;\n        if (!db.objectStoreNames.contains(\"data\")) {\n            db.createObjectStore(\"data\");\n        }\n    };\n  \n    // If success\n    IDBrequest.onsuccess = function(event) {\n\n        const db = IDBrequest.result;\n  \n        const transaction = db.transaction([\"data\"], \"readwrite\");\n        const objectStore: IDBObjectStore = transaction.objectStore(\"data\");\n        const request = objectStore.add(data, new Date().getTime());\n\n        request.onsuccess = function(event) {\n            console.log(\"Data has been added to your database.\");\n        };\n\n        transaction.oncomplete = function(event) {\n            db.close();\n        };\n        \n    };\n\n  }\n\nfunction getDataFromIndexedDB(DBname:string, DBversion:number, DBstore:string) {\n\n    // Create request to open a indexed database\n    const IDBrequest: IDBRequest = window.indexedDB.open(DBname, DBversion);\n\n    // If error\n    IDBrequest.onerror = function(event) {\n        console.log(\"IndexedDB error: \" + (event.target as any).errorCode);\n    };  \n\n    // If success\n    IDBrequest.onsuccess = function(event) {\n        const db = IDBrequest.result;\n        const transaction = db.transaction([DBstore], \"readwrite\");\n        const objectStore = transaction.objectStore(DBstore);\n        const request = objectStore.getAll();\n        request.onsuccess = function(event) {\n            console.log(\"Data has been added to your database.\");\n        };\n        transaction.oncomplete = function(event) {\n            db.close();\n        };\n    };\n}\n\n\nfunction saveDataToClientDevice(data: any, filename: string) {\n    const blob = new Blob([data], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.setAttribute('download', filename);\n    a.setAttribute('href', url);\n    a.click();\n}\n\nfunction saveJSONDataToClientDevice(data: any, filename: string) {\n    saveDataToClientDevice(JSON.stringify(data), filename);\n}\n\nexport {\n    saveDataToLocalStorage,\n    saveDataToIndexedDB,\n    saveDataToClientDevice,\n    saveJSONDataToClientDevice,\n    getDataFromLocalStorage,\n    getDataFromIndexedDB\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}