{"ast":null,"code":"var _jsxFileName = \"/Users/pavlov/Documents/GitHub/vss-visual-search/src/pages/game/gngGame/GNGGame.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './GNGGame.css';\nimport BreadCrumb from '../../../components/breadcrumbs/breadCrumb';\nimport GNGWindow from '../../../components/gameWindow/gngWindow/GNGWindow';\nimport ScoreSummaryOverlay from '../../../components/scoreSummaryOverlay/ScoreSummaryOverlay';\nimport useSound from 'use-sound';\nimport clickSoundSrc from '../../../assets/sound/click.mp3';\nimport combo1SoundSrc from '../../../assets/sound/combo1.mp3';\nimport combo2SoundSrc from '../../../assets/sound/combo2.mp3';\nimport combo3SoundSrc from '../../../assets/sound/combo3.mp3';\nimport losingSoundSrc from '../../../assets/sound/losingStreak.mp3';\nimport moment from 'moment';\nimport RotateAlert from '../../../components/rotateAlert/RotateAlert';\nimport { Shuffle } from '../../../scripts/shuffle';\nimport { saveJSONDataToClientDevice } from '../../../uitls/offline';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet trialNumber = 100;\nlet goSignalColor = getComputedStyle(document.documentElement).getPropertyValue('--go-color').trim();\nlet noGoSignalColor = getComputedStyle(document.documentElement).getPropertyValue('--nogo-color').trim();\nlet restColor = getComputedStyle(document.documentElement).getPropertyValue('--rest-color').trim();\nlet flashDuration = 450;\nlet baseFlashInterval = 600;\nlet timeOffset = 100;\nlet haveDone = false;\nlet haveToClick = false;\nlet falseClicked = false;\nlet rtBound = 1000;\nlet scorePerTrial = [];\nlet total = 0;\nlet score;\nlet correctCountForCombo = 0;\nlet comboCount = [];\nlet allTimePop = []; // use for scoring section\nlet allColorPop = [];\nlet allTimeEvent = []; // use for collecting in backend\nlet allInteractionEvent = [];\nlet allClickEvent = [];\nlet testEnd = [];\nlet rt = [];\nlet hitRt = [];\nlet falseHitRt = [];\nlet latestRtIndex = 0;\nlet latestHitRtIndex = 0;\nlet sumHitRt;\nlet sumFalseHitRt;\nlet avgHitRt = 0;\nlet avgFalseHitRt = 0;\nlet blockDuration = 1; // sec เข้าใจว่าระยะห่างของเวลาการปิ้งแว้บขึ้นของแต่ละตัว (ยิ่งเยอะตัวปิ้งแว้บยิ่งน้อย)\nlet changeRate = 0.8; // % changes \nlet noGoRate = 0.2; // % nogo \nlet onlyGoBlockRatio = 0.1;\nlet goNoGoBlockRatio = 1 - onlyGoBlockRatio;\nlet onlyGoBlock = Math.round(trialNumber * onlyGoBlockRatio);\nlet goInOnlyGo = Math.round(onlyGoBlock * changeRate * (1 - noGoRate));\nlet noChangeInOnlyGo = onlyGoBlock - goInOnlyGo;\nlet tempEventGo = [];\nfor (let i1 = 0; i1 < goInOnlyGo; i1++) {\n  tempEventGo.push(1);\n}\n;\nfor (let i0 = 0; i0 < noChangeInOnlyGo - 1; i0++) {\n  tempEventGo.push(0);\n}\n;\nlet goNoGoBlock = Math.round(trialNumber * goNoGoBlockRatio);\nlet noGoInGoNoGo = Math.round(goNoGoBlock * changeRate * noGoRate);\nlet goInGoNoGo = Math.round(goNoGoBlock * changeRate * (1 - noGoRate));\nlet noChangeInGoNoGo = goNoGoBlock - goInGoNoGo - noGoInGoNoGo;\nlet tempEventGoNoGo = [];\nfor (let i2 = 0; i2 < noGoInGoNoGo; i2++) {\n  tempEventGoNoGo.push(2);\n}\n;\nfor (let i1 = 0; i1 < goInGoNoGo; i1++) {\n  tempEventGoNoGo.push(1);\n}\n;\nfor (let i0 = 0; i0 < noChangeInGoNoGo - 1; i0++) {\n  tempEventGoNoGo.push(0);\n}\n; // white will be in the first and last ones to make sure that the RTs will be recorded.\nShuffle(tempEventGo);\nShuffle(tempEventGoNoGo);\nlet eventId = [0];\neventId = eventId.concat(tempEventGo);\neventId = eventId.concat(tempEventGoNoGo);\neventId = eventId.concat(0);\ntrialNumber = eventId.length;\nlet currEventId = 0;\nlet jitterBase = 400;\nlet jitterAmplitude = 300;\nconst Jitter = [Math.random() * jitterAmplitude + jitterBase];\nfor (let i = 0; i < eventId.length - 1; i++) {\n  Jitter.push(Math.random() * jitterAmplitude + jitterBase + Jitter[i]);\n}\n;\nlet hitCount = 0;\nlet missCount = 0;\nlet correctRejectionCount = 0;\nlet falseAlarmCount = 0;\nlet falseHitCount = 0;\nlet falseSignalRejectionCount = 0;\nlet allNone = 0;\nlet allGo = 0;\nlet allNoGo = 0;\nlet gameLogicSchemeResult;\nlet cueDataResult = [];\nlet userInteractionDataResult = [];\nlet scoringDataResult = [];\nlet metricDataResult = [];\nlet postEntryResult;\nfunction GNGGame(props) {\n  _s();\n  const navigate = useNavigate();\n  const [btnOnClicked, setBtnOnClicked] = useState(false);\n  const [circleBtnClass, setCircleBtnClass] = useState(\"\");\n  const [clickSound] = useSound(clickSoundSrc);\n  const [combo1Sound] = useSound(combo1SoundSrc);\n  const [combo2Sound] = useSound(combo2SoundSrc);\n  const [combo3Sound] = useSound(combo3SoundSrc);\n  const [losingSound] = useSound(losingSoundSrc);\n  const [progressValue, setProgressValue] = useState(0);\n  const [isItDone, setIsItDone] = useState(false);\n  const [hardGNGDone, setHardGNGDone] = useState(false);\n  let timeoutList = [];\n  useEffect(() => {\n    initiateData();\n    let progressDuration = ((flashDuration + (trialNumber - 1) * baseFlashInterval + Jitter[trialNumber - 1] + 200) / 1000).toString() + 's';\n    createProgressBar('progressBar', progressDuration);\n    gameLogicSchemeResult = gameLogicScheme(trialNumber, changeRate, noGoRate, onlyGoBlockRatio, goNoGoBlockRatio, flashDuration, baseFlashInterval, jitterBase, jitterAmplitude, timeOffset);\n    popColor(flashDuration, baseFlashInterval, eventId);\n    return () => {\n      timeoutList.forEach(tm => {\n        clearTimeout(tm);\n      });\n    };\n  }, []);\n  function initiateData() {\n    rt = [];\n    hitRt = [];\n    falseHitRt = [];\n    allTimePop = [];\n    allColorPop = [];\n    testEnd = [];\n    currEventId = 0;\n    haveDone = false;\n    haveToClick = false;\n    falseClicked = false;\n    comboCount = [];\n    correctCountForCombo = 0;\n    correctRejectionCount = noChangeInOnlyGo + noChangeInGoNoGo;\n    falseSignalRejectionCount = noGoInGoNoGo;\n    allNone = 0;\n    allGo = 0;\n    allNoGo = 0;\n    hitCount = 0;\n    missCount = 0;\n    falseAlarmCount = 0;\n    falseHitCount = 0;\n  }\n  function gameLogicScheme(trialNumber, changeRate, noGoRate, onlyGoBlockRatio, goNoGoBlockRatio, flashDuration, baseFlashInterval, jitterBase, jitterAmplitude, timeOffset) {\n    eventId.map((num, index) => {\n      if (num === 0) {\n        allNone++;\n      } else if (num === 1) {\n        allGo++;\n      } else {\n        allNoGo++;\n      }\n    });\n    gameLogicSchemeResult = {\n      \"game\": \"go-nogo\",\n      \"schemeName\": \"default\",\n      \"version\": 1.0,\n      \"variant\": \"main\",\n      \"parameters\": {\n        \"trialNumber\": {\n          \"value\": trialNumber,\n          \"unit\": null,\n          \"description\": \"Total number of signal\"\n        },\n        \"allGoSignal\": {\n          \"value\": allGo,\n          \"unit\": null,\n          \"description\": \"Total number of go signal\"\n        },\n        \"allNoGoSignal\": {\n          \"value\": allNoGo,\n          \"unit\": null,\n          \"description\": \"Total number of nogo signal\"\n        },\n        \"allNoneSignal\": {\n          \"value\": allNone,\n          \"unit\": null,\n          \"description\": \"Total number of none signal\"\n        },\n        \"changeRate\": {\n          \"value\": changeRate,\n          \"unit\": null,\n          \"description\": \"Rate of change between go and nogo block\"\n        },\n        \"nogoRate\": {\n          \"value\": noGoRate,\n          \"unit\": null,\n          \"description\": \"Rate of nogo signal\"\n        },\n        \"onlyGoBlockRatio\": {\n          \"value\": onlyGoBlockRatio,\n          \"unit\": null,\n          \"description\": \"Ratio of only go block section\"\n        },\n        \"goNoGoBlockRatio\": {\n          \"value\": goNoGoBlockRatio,\n          \"unit\": null,\n          \"description\": \"Ratio of go-nogo block section\"\n        },\n        \"flashDuration\": {\n          \"value\": flashDuration,\n          \"unit\": \"ms\",\n          \"description\": \"Duration(ms) of flash/signal\"\n        },\n        \"baseFlashInterval\": {\n          \"value\": baseFlashInterval,\n          \"unit\": \"ms\",\n          \"description\": \"Base duration between each signal\"\n        },\n        \"jitterBase\": {\n          \"value\": jitterBase,\n          \"unit\": \"ms\",\n          \"description\": \"Base(added) duration between each signal\"\n        },\n        \"jitterAmplitude\": {\n          \"value\": jitterAmplitude,\n          \"unit\": \"ms\",\n          \"description\": \"Added jittering amplitude of time between each signal\"\n        },\n        \"timeOffset\": {\n          \"value\": timeOffset,\n          \"unit\": \"ms\",\n          \"description\": \"Negative time offset to reduce time before first signal (Deduct from jittered timeout)\"\n        }\n      },\n      \"description\": \"Default Go-Nogo Configuration\"\n    };\n    return gameLogicSchemeResult;\n  }\n  function createProgressBar(id, duration) {\n    let progressBar = document.getElementById(id);\n    let progressBarInner = document.createElement('div');\n    progressBarInner.className = 'inner';\n    progressBarInner.style.animationDuration = duration;\n    if (progressBar) {\n      progressBar.hidden = false;\n      if (progressBar.firstChild) {\n        progressBar.removeChild(progressBar.firstChild);\n      }\n      progressBar.className = 'progressbar';\n      progressBar.appendChild(progressBarInner);\n    }\n    progressBarInner.style.animationPlayState = 'running';\n  }\n  function popColor(popTime, intervalTime, colors) {\n    let progressBar = document.getElementById('progressBar');\n    progressBar === null || progressBar === void 0 ? void 0 : progressBar.classList.add('show-block');\n    for (let iSeq = 0; iSeq < trialNumber; iSeq++) {\n      if (colors[iSeq] === 0) {\n        timeoutList.push(setTimeout(function () {\n          let end = endTime();\n          allTimePop.push(end);\n          allColorPop.push(restColor);\n          allTimeEvent.push(thisTime());\n          currEventId = 0;\n          falseClicked = false;\n        }, iSeq * intervalTime + Jitter[iSeq]));\n      } else if (colors[iSeq] === 1) {\n        timeoutList.push(setTimeout(function () {\n          let end = endTime();\n          setCircleBtnClass(\"green\");\n          allTimePop.push(end);\n          allColorPop.push(goSignalColor);\n          allTimeEvent.push(thisTime());\n          currEventId = 1;\n          haveToClick = false;\n        }, iSeq * intervalTime + Jitter[iSeq]));\n        timeoutList.push(setTimeout(function () {\n          let end = endTime();\n          setCircleBtnClass(\"\");\n        }, popTime + iSeq * intervalTime + Jitter[iSeq]));\n        timeoutList.push(setTimeout(function () {\n          if (haveToClick === false) {\n            correctCountForCombo = 0;\n            missCount++;\n          }\n        }, (iSeq + 1) * intervalTime + Jitter[iSeq + 1] - timeOffset));\n      } else if (colors[iSeq] === 2) {\n        timeoutList.push(setTimeout(function () {\n          let end = endTime();\n          setCircleBtnClass(\"red\");\n          allTimePop.push(end);\n          allColorPop.push(noGoSignalColor);\n          allTimeEvent.push(thisTime());\n          currEventId = 2;\n          falseClicked = false;\n        }, iSeq * intervalTime + Jitter[iSeq]));\n        timeoutList.push(setTimeout(function () {\n          let end = endTime();\n          setCircleBtnClass(\"\");\n        }, popTime + iSeq * intervalTime + Jitter[iSeq]));\n      }\n    }\n    runIsOver(popTime + (trialNumber - 1) * intervalTime + Jitter[trialNumber - 1] + 200);\n  }\n  function runIsOver(waitTheWholeTime) {\n    timeoutList.push(setTimeout(function () {\n      testEnd.push(endTime());\n      if (haveDone === false) {\n        haveDone = true;\n        checkAllAns();\n        Done();\n      }\n    }, waitTheWholeTime));\n  }\n  function scoringData(rtBound, trialNumber, score) {\n    scoringDataResult = [{\n      \"scoringModel\": {\n        \"scoringName\": \"default\",\n        \"parameters\": {\n          \"rtBound\": {\n            \"value\": rtBound,\n            \"unit\": null,\n            \"description\": \"rtBound - hitRt = rtScore\"\n          },\n          \"trialNumber\": {\n            \"value\": trialNumber,\n            \"unit\": null,\n            \"description\": \"Total number of signal\"\n          }\n        },\n        \"description\": `score = sum of the scorePerTrial if comboCount = [1, 2, 3, 4] -> comboMultiplier = [1, 1.5, 3, 5]`\n      },\n      \"score\": score\n    }];\n    return scoringDataResult;\n  }\n  function metricData(hitCount, missCount, correctRejectionCount, falseAlarmCount, falseSignalRejectionCount, falseHitCount, hitRt, avgHitRt, avgFalseHitRt) {\n    hitRt.sort((a, b) => a - b);\n    let metricName = ['correctCount', 'incorrectCount', 'hitCount', 'missCount', 'correctRejectionCount', 'falseAlarmCount', 'falseSignalRejectionCount', 'falseHitCount', 'hitAccuracy', 'falseSignalRejectionAccuracy', 'fastestHitReactionTime', 'averageHitReactionTime', 'averageFalseHitReactionTime'];\n    let metricValue = [hitCount + correctRejectionCount + falseSignalRejectionCount, missCount + falseAlarmCount + falseHitCount, hitCount, missCount, correctRejectionCount, falseAlarmCount, falseSignalRejectionCount, falseHitCount, hitCount / allGo * 100, falseSignalRejectionCount / allNoGo * 100, hitRt[0], avgHitRt, avgFalseHitRt];\n    let metricUnit = [null, null, null, null, null, null, null, null, '%', '%', 'ms', 's', 's'];\n    let metricDescription = ['Total number of correct trials', 'Total number of incorrect trials', 'Total number of hit trials', 'Total number of miss trials', 'Total number of correct rejection trials', 'Total number of false alarm trials', 'Total number of rejection incorrect signal trials', 'Total number of hit on incorrect signal trials', 'The accuracy of hit', 'The accuracy of false signal rejection', 'The fastest hit reaction time that user reached', 'The average of all hit reaction time', 'The average of all hit on incorrect signal reaction time'];\n    for (let i = 0; i < metricName.length; i++) {\n      let obj_to_append;\n      obj_to_append = {\n        \"metricName\": metricName[i],\n        \"value\": metricValue[i],\n        \"unit\": metricUnit[i],\n        \"description\": metricDescription[i]\n      };\n      metricDataResult.push(obj_to_append);\n    }\n    return metricDataResult;\n  }\n  function cueData(allColorPop, allTimeEvent) {\n    for (let i = 0; i < allColorPop.length; i++) {\n      let obj_to_append;\n      obj_to_append = {\n        \"cueEvent\": allColorPop[i],\n        \"cueStart\": allTimeEvent[i]\n      };\n      cueDataResult.push(obj_to_append);\n    }\n    return cueDataResult;\n  }\n  function userInteractionData(allInteractionEvent, allClickEvent) {\n    for (let i = 0; i < allInteractionEvent.length; i++) {\n      let obj_to_append;\n      obj_to_append = {\n        \"interactionEvent\": allInteractionEvent[i],\n        \"timestamp\": allClickEvent[i]\n      };\n      userInteractionDataResult.push(obj_to_append);\n    }\n    return userInteractionDataResult;\n  }\n  function postEntry(cueDataResult, userInteractionDataResult, gameLogicSchemeResult, scoringDataResult, metricDataResult) {\n    postEntryResult = {\n      \"date\": `${thisTime().toString()}`,\n      \"userId\": props.userId,\n      \"userPhone\": props.userPhone,\n      \"userSession\": props.userSession,\n      \"data\": {\n        \"rawData\": {\n          \"cueData\": cueDataResult,\n          \"userInteractionData\": userInteractionDataResult\n        },\n        \"gameLogicScheme\": gameLogicSchemeResult,\n        \"scoringData\": scoringDataResult,\n        \"metricData\": metricDataResult\n      }\n    };\n    return postEntryResult;\n  }\n  function checkAllAns() {\n    for (let popIndex = 0; popIndex < allColorPop.length; popIndex++) {\n      let currColorPop = allColorPop[popIndex];\n      let currTimePop = allTimePop[popIndex];\n      let satisfied = false;\n      let nextTimePop = testEnd;\n      if (popIndex < allColorPop.length - 1) {\n        nextTimePop = allTimePop[popIndex + 1];\n      }\n      let currRt;\n      for (let rtIndex = latestRtIndex; rtIndex < rt.length; rtIndex++) {\n        currRt = rt[rtIndex];\n        latestRtIndex = rtIndex;\n        if (currRt < currTimePop) {\n          continue;\n        } else if (currRt >= currTimePop && currRt < nextTimePop) {\n          if (satisfied === false) {\n            if (currColorPop === goSignalColor) {\n              hitRt.push(currRt - currTimePop.getTime());\n            } else if (currColorPop === noGoSignalColor) {\n              falseHitRt.push(currRt - currTimePop.getTime());\n            }\n            satisfied = true;\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    getSummaryScore();\n  }\n  function getSummaryScore() {\n    for (let correctIndex = latestHitRtIndex; correctIndex < comboCount.length; correctIndex++) {\n      latestHitRtIndex = correctIndex;\n      let rtScore = rtBound - hitRt[correctIndex];\n      if (comboCount[correctIndex] === 1) {\n        rtScore *= 1;\n      } else if (comboCount[correctIndex] === 2) {\n        rtScore *= 1.5;\n      } else if (comboCount[correctIndex] === 3) {\n        rtScore *= 3;\n      } else if (comboCount[correctIndex] === 4) {\n        rtScore *= 5;\n      }\n      scorePerTrial.push(rtScore);\n    }\n    if (hitRt.length !== 0) {\n      sumHitRt = hitRt.reduce((sum, score) => {\n        return sum + score;\n      });\n    } else {\n      hitRt.push(0);\n      sumHitRt = hitRt;\n    }\n    avgHitRt = sumHitRt / 1000 / hitRt.length;\n    if (falseHitRt.length !== 0) {\n      sumFalseHitRt = falseHitRt.reduce((sum, score) => {\n        return sum + score;\n      });\n    } else {\n      falseHitRt.push(0);\n      sumFalseHitRt = falseHitRt;\n    }\n    avgFalseHitRt = sumFalseHitRt / 1000 / falseHitRt.length;\n    if (scorePerTrial.length !== 0) {\n      total = scorePerTrial.reduce((sum, score) => {\n        return sum + score;\n      });\n    } else {\n      scorePerTrial.push(0);\n    }\n    return total;\n  }\n  function checkResp() {\n    // clickSound();\n    if (currEventId === 1) {\n      if (haveToClick === false) {\n        haveToClick = true;\n        if (correctCountForCombo === 5) {\n          correctCountForCombo = 5;\n        } else {\n          correctCountForCombo++;\n        }\n        if (correctCountForCombo === 1) {\n          comboCount.push(1);\n          // combo1Sound();\n        } else if (correctCountForCombo === 2) {\n          comboCount.push(1);\n          // combo2Sound();\n        } else if (correctCountForCombo === 3) {\n          comboCount.push(2);\n          // combo3Sound();\n        } else if (correctCountForCombo === 4) {\n          comboCount.push(3);\n          // combo3Sound();\n        } else if (correctCountForCombo === 5) {\n          comboCount.push(4);\n          // combo3Sound();\n        }\n\n        hitCount++;\n      }\n    } else {\n      if (falseClicked === false) {\n        correctCountForCombo = 0;\n        // losingSound();\n        falseClicked = true;\n        if (currEventId === 0) {\n          falseAlarmCount++;\n          if (correctRejectionCount > 0) {\n            correctRejectionCount--;\n          }\n        }\n        if (currEventId === 2) {\n          falseHitCount++;\n          if (falseSignalRejectionCount > 0) {\n            falseSignalRejectionCount--;\n          }\n        }\n      }\n    }\n  }\n  function Done() {\n    setIsItDone(true);\n    setHardGNGDone(true);\n    score = Math.max(10000, Math.round(total));\n    cueDataResult = cueData(allColorPop, allTimeEvent);\n    userInteractionDataResult = userInteractionData(allInteractionEvent, allClickEvent);\n    scoringDataResult = scoringData(rtBound, trialNumber, score);\n    metricDataResult = metricData(hitCount, missCount, correctRejectionCount, falseAlarmCount, falseSignalRejectionCount, falseHitCount, hitRt, avgHitRt, avgFalseHitRt);\n    postEntryResult = postEntry(cueDataResult, userInteractionDataResult, gameLogicSchemeResult, scoringDataResult, metricDataResult);\n    axios.post('https://exercise-vercel-svelte-backend.vercel.app/api/hard/gonogo', postEntryResult).then(function (postEntryResult) {\n      console.log(postEntryResult);\n    }).catch(function (error) {\n      console.log('error');\n    });\n    saveJSONDataToClientDevice(postEntryResult, `Subject${props.userId}_gonogo_hard_session${props.userSession}_${thisTime().toString()}`);\n  }\n  function touchStart() {\n    let end = endTime();\n    allInteractionEvent.push('mouse-down');\n    allClickEvent.push(thisTime());\n    setBtnOnClicked(true);\n    rt.push(end.getTime());\n    checkResp();\n  }\n  function touchEnd() {\n    let end = endTime();\n    allInteractionEvent.push('mouse-up');\n    allClickEvent.push(thisTime());\n    setBtnOnClicked(false);\n  }\n  function refreshPage() {\n    window.location.reload();\n  }\n  function backToLandingPage() {\n    navigate('/landing');\n    refreshPage();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"py-4 px-12 sm:py-8 w-full bg-blue-100 shadow-md\",\n        children: /*#__PURE__*/_jsxDEV(BreadCrumb, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"GNGGameBody\",\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"GNGGameBodyProgressBar\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progressBarContainer\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"progressBar\",\n              hidden: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 644,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 643,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"GNGGameWindow\",\n          children: /*#__PURE__*/_jsxDEV(GNGWindow, {\n            touchStart: touchStart,\n            touchEnd: touchEnd,\n            btnOnClicked: btnOnClicked,\n            circleBtnClass: circleBtnClass\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"GNGGameEnterButton\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 9\n    }, this), isItDone ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ScoreSummaryOverlay, {\n        accuracy: hitCount / allGo * 100,\n        falseHit: falseHitCount / allNoGo * 100,\n        avgHitRt: avgHitRt,\n        hardGNGDone: hardGNGDone,\n        refreshPage: refreshPage,\n        backToLandingPage: backToLandingPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 654,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(RotateAlert, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 658,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 636,\n    columnNumber: 9\n  }, this);\n}\n_s(GNGGame, \"iKOgr7CmjaSEkOUqS2qS0Xa2hzc=\", false, function () {\n  return [useNavigate, useSound, useSound, useSound, useSound, useSound];\n});\n_c = GNGGame;\nexport default GNGGame;\nfunction endTime() {\n  let d = new Date();\n  return d;\n}\nfunction thisTime() {\n  let thisTime = moment().format('YYYY-MM-DDTkk:mm:ss.SSSSSS');\n  return thisTime;\n}\nvar _c;\n$RefreshReg$(_c, \"GNGGame\");","map":{"version":3,"names":["useEffect","useState","useNavigate","BreadCrumb","GNGWindow","ScoreSummaryOverlay","useSound","clickSoundSrc","combo1SoundSrc","combo2SoundSrc","combo3SoundSrc","losingSoundSrc","moment","RotateAlert","Shuffle","saveJSONDataToClientDevice","axios","jsxDEV","_jsxDEV","trialNumber","goSignalColor","getComputedStyle","document","documentElement","getPropertyValue","trim","noGoSignalColor","restColor","flashDuration","baseFlashInterval","timeOffset","haveDone","haveToClick","falseClicked","rtBound","scorePerTrial","total","score","correctCountForCombo","comboCount","allTimePop","allColorPop","allTimeEvent","allInteractionEvent","allClickEvent","testEnd","rt","hitRt","falseHitRt","latestRtIndex","latestHitRtIndex","sumHitRt","sumFalseHitRt","avgHitRt","avgFalseHitRt","blockDuration","changeRate","noGoRate","onlyGoBlockRatio","goNoGoBlockRatio","onlyGoBlock","Math","round","goInOnlyGo","noChangeInOnlyGo","tempEventGo","i1","push","i0","goNoGoBlock","noGoInGoNoGo","goInGoNoGo","noChangeInGoNoGo","tempEventGoNoGo","i2","eventId","concat","length","currEventId","jitterBase","jitterAmplitude","Jitter","random","i","hitCount","missCount","correctRejectionCount","falseAlarmCount","falseHitCount","falseSignalRejectionCount","allNone","allGo","allNoGo","gameLogicSchemeResult","cueDataResult","userInteractionDataResult","scoringDataResult","metricDataResult","postEntryResult","GNGGame","props","_s","navigate","btnOnClicked","setBtnOnClicked","circleBtnClass","setCircleBtnClass","clickSound","combo1Sound","combo2Sound","combo3Sound","losingSound","progressValue","setProgressValue","isItDone","setIsItDone","hardGNGDone","setHardGNGDone","timeoutList","initiateData","progressDuration","toString","createProgressBar","gameLogicScheme","popColor","forEach","tm","clearTimeout","map","num","index","id","duration","progressBar","getElementById","progressBarInner","createElement","className","style","animationDuration","hidden","firstChild","removeChild","appendChild","animationPlayState","popTime","intervalTime","colors","classList","add","iSeq","setTimeout","end","endTime","thisTime","runIsOver","waitTheWholeTime","checkAllAns","Done","scoringData","metricData","sort","a","b","metricName","metricValue","metricUnit","metricDescription","obj_to_append","cueData","userInteractionData","postEntry","userId","userPhone","userSession","popIndex","currColorPop","currTimePop","satisfied","nextTimePop","currRt","rtIndex","getTime","getSummaryScore","correctIndex","rtScore","reduce","sum","checkResp","max","post","then","console","log","catch","error","touchStart","touchEnd","refreshPage","window","location","reload","backToLandingPage","children","fileName","_jsxFileName","lineNumber","columnNumber","accuracy","falseHit","_c","d","Date","format","$RefreshReg$"],"sources":["/Users/pavlov/Documents/GitHub/vss-visual-search/src/pages/game/gngGame/GNGGame.tsx"],"sourcesContent":["import { useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './GNGGame.css';\nimport BreadCrumb from '../../../components/breadcrumbs/breadCrumb';\nimport GNGWindow from '../../../components/gameWindow/gngWindow/GNGWindow';\nimport ScoreSummaryOverlay from '../../../components/scoreSummaryOverlay/ScoreSummaryOverlay';\nimport useSound from 'use-sound';\nimport clickSoundSrc from '../../../assets/sound/click.mp3';\nimport combo1SoundSrc from '../../../assets/sound/combo1.mp3';\nimport combo2SoundSrc from '../../../assets/sound/combo2.mp3';\nimport combo3SoundSrc from '../../../assets/sound/combo3.mp3';\nimport losingSoundSrc from '../../../assets/sound/losingStreak.mp3';\nimport moment from 'moment';\nimport RotateAlert from '../../../components/rotateAlert/RotateAlert';\nimport { Shuffle } from '../../../scripts/shuffle';\nimport { saveJSONDataToClientDevice } from '../../../uitls/offline';\nimport axios from 'axios';\n\nlet trialNumber = 100;\nlet goSignalColor: string = getComputedStyle(document.documentElement).getPropertyValue('--go-color').trim();\nlet noGoSignalColor: string = getComputedStyle(document.documentElement).getPropertyValue('--nogo-color').trim();\nlet restColor: string = getComputedStyle(document.documentElement).getPropertyValue('--rest-color').trim();\nlet flashDuration = 450;\nlet baseFlashInterval = 600;\nlet timeOffset = 100;\nlet haveDone = false;\nlet haveToClick = false;\nlet falseClicked = false;\nlet rtBound: number = 1000;\nlet scorePerTrial: number[] = [];\nlet total: number = 0;\nlet score: number;\nlet correctCountForCombo = 0;\nlet comboCount: number[] = [];\nlet allTimePop: Date[] = []; // use for scoring section\nlet allColorPop: string[] = [];\nlet allTimeEvent: string[] = []; // use for collecting in backend\nlet allInteractionEvent: string[] = [];\nlet allClickEvent: string[] = [];\nlet testEnd: Date[] = [];\nlet rt: number[] = [];\nlet hitRt: number[] = [];\nlet falseHitRt: number[] = [];\nlet latestRtIndex = 0;\nlet latestHitRtIndex = 0;\nlet sumHitRt;\nlet sumFalseHitRt;\nlet avgHitRt: number = 0;\nlet avgFalseHitRt: number = 0;\nlet blockDuration = 1; // sec เข้าใจว่าระยะห่างของเวลาการปิ้งแว้บขึ้นของแต่ละตัว (ยิ่งเยอะตัวปิ้งแว้บยิ่งน้อย)\nlet changeRate = 0.8; // % changes \nlet noGoRate = 0.2; // % nogo \nlet onlyGoBlockRatio = 0.1;\nlet goNoGoBlockRatio = 1 - onlyGoBlockRatio;\nlet onlyGoBlock = Math.round((trialNumber) * onlyGoBlockRatio);\nlet goInOnlyGo = Math.round(onlyGoBlock * changeRate * (1 - noGoRate));\nlet noChangeInOnlyGo = onlyGoBlock - goInOnlyGo;\nlet tempEventGo: any[] = [];\nfor (let i1 = 0; i1 < goInOnlyGo; i1++) { tempEventGo.push(1)};\nfor (let i0 = 0; i0 < (noChangeInOnlyGo - 1); i0++) { tempEventGo.push(0)};\nlet goNoGoBlock = Math.round((trialNumber) * goNoGoBlockRatio);\nlet noGoInGoNoGo = Math.round(goNoGoBlock * changeRate * noGoRate);\nlet goInGoNoGo = Math.round(goNoGoBlock * changeRate * (1 - noGoRate));\nlet noChangeInGoNoGo = goNoGoBlock - goInGoNoGo - noGoInGoNoGo;\nlet tempEventGoNoGo: any[] = [];\nfor (let i2 = 0; i2 < noGoInGoNoGo; i2++) { tempEventGoNoGo.push(2)};\nfor (let i1 = 0; i1 < goInGoNoGo; i1++) { tempEventGoNoGo.push(1)};\nfor (let i0 = 0; i0 < (noChangeInGoNoGo - 1); i0++) { tempEventGoNoGo.push(0)}; // white will be in the first and last ones to make sure that the RTs will be recorded.\nShuffle(tempEventGo);\nShuffle(tempEventGoNoGo);\nlet eventId = [0];\neventId = eventId.concat(tempEventGo);\neventId = eventId.concat(tempEventGoNoGo);\neventId = eventId.concat(0);\ntrialNumber = eventId.length;\nlet currEventId = 0;\nlet jitterBase = 400;\nlet jitterAmplitude = 300;\nconst Jitter = [Math.random() * jitterAmplitude + jitterBase];\nfor (let i = 0; i < eventId.length - 1; i++) {\n    Jitter.push((Math.random() * jitterAmplitude + jitterBase) + Jitter[i])\n};\nlet hitCount = 0;\nlet missCount = 0;\nlet correctRejectionCount = 0;\nlet falseAlarmCount = 0;\nlet falseHitCount = 0;\nlet falseSignalRejectionCount = 0;\nlet allNone = 0;\nlet allGo = 0;\nlet allNoGo = 0;\nlet gameLogicSchemeResult;\nlet cueDataResult: any[] = [];\nlet userInteractionDataResult: any[] = [];\nlet scoringDataResult: any[] = [];\nlet metricDataResult: any[] = [];\nlet postEntryResult;\n\nfunction GNGGame(props) {\n    const navigate = useNavigate();\n    const [btnOnClicked, setBtnOnClicked] = useState(false);\n    const [circleBtnClass, setCircleBtnClass] = useState(\"\");\n    const [clickSound] = useSound(clickSoundSrc);\n    const [combo1Sound] = useSound(combo1SoundSrc);\n    const [combo2Sound] = useSound(combo2SoundSrc);\n    const [combo3Sound] = useSound(combo3SoundSrc);\n    const [losingSound] = useSound(losingSoundSrc);\n    const [progressValue, setProgressValue] = useState(0);\n    const [isItDone, setIsItDone] = useState(false);\n    const [hardGNGDone, setHardGNGDone] = useState(false);\n    let timeoutList: any[] = [];\n\n    useEffect(() => {\n        initiateData();\n        let progressDuration = ((flashDuration + ((trialNumber - 1) * baseFlashInterval) + Jitter[trialNumber - 1] + 200) / 1000).toString() + 's';\n        createProgressBar('progressBar', progressDuration);\n        gameLogicSchemeResult = gameLogicScheme(trialNumber, changeRate, noGoRate, onlyGoBlockRatio, goNoGoBlockRatio, flashDuration, baseFlashInterval, jitterBase, jitterAmplitude, timeOffset);\n        popColor(flashDuration, baseFlashInterval, eventId);\n        return () => {\n            timeoutList.forEach(tm => {\n                clearTimeout(tm);\n            })\n        };\n    }, [])\n\n    function initiateData() {\n        rt = [];\n        hitRt = [];\n        falseHitRt = [];\n        allTimePop = [];\n        allColorPop = [];\n        testEnd = [];\n        currEventId = 0;\n        haveDone = false;\n        haveToClick = false;\n        falseClicked = false;\n        comboCount = [];\n        correctCountForCombo = 0;\n        correctRejectionCount = noChangeInOnlyGo + noChangeInGoNoGo;\n        falseSignalRejectionCount = noGoInGoNoGo;\n        allNone = 0;\n        allGo = 0;\n        allNoGo = 0;\n        hitCount = 0;\n        missCount = 0;\n        falseAlarmCount = 0;\n        falseHitCount = 0;\n    }\n\n    function gameLogicScheme(trialNumber, changeRate, noGoRate, onlyGoBlockRatio, goNoGoBlockRatio, flashDuration, baseFlashInterval, jitterBase, jitterAmplitude, timeOffset) {\n        eventId.map((num, index) => {\n            if (num === 0){\n                allNone++;\n            } else if (num === 1){\n                allGo++;\n            } else {\n                allNoGo++;\n            }\n        });\n        gameLogicSchemeResult = {\n            \"game\": \"go-nogo\",\n            \"schemeName\" : \"default\",\n            \"version\" : 1.0,\n            \"variant\": \"main\",\n            \"parameters\" : {\n                \"trialNumber\" : {\n                    \"value\": trialNumber,\n                    \"unit\": null,\n                    \"description\" : \"Total number of signal\"\n                },\n                \"allGoSignal\" : {\n                    \"value\" : allGo,\n                    \"unit\" : null,\n                    \"description\" : \"Total number of go signal\"\n                },\n                \"allNoGoSignal\" : {\n                    \"value\" : allNoGo,\n                    \"unit\" : null,\n                    \"description\" : \"Total number of nogo signal\"\n                },\n                \"allNoneSignal\" : {\n                    \"value\" : allNone,\n                    \"unit\" : null,\n                    \"description\" : \"Total number of none signal\"\n                },\n                \"changeRate\" : {\n                    \"value\": changeRate,\n                    \"unit\": null,\n                    \"description\": \"Rate of change between go and nogo block\"\n                },\n                \"nogoRate\" : {\n                    \"value\": noGoRate,\n                    \"unit\": null,\n                    \"description\": \"Rate of nogo signal\"\n                },\n                \"onlyGoBlockRatio\": {\n                    \"value\": onlyGoBlockRatio,\n                    \"unit\" : null,\n                    \"description\" : \"Ratio of only go block section\"\n                },\n                \"goNoGoBlockRatio\": {\n                    \"value\": goNoGoBlockRatio,\n                    \"unit\" : null,\n                    \"description\" : \"Ratio of go-nogo block section\"\n                },\n                \"flashDuration\" : {\n                    \"value\" : flashDuration,\n                    \"unit\": \"ms\",\n                    \"description\" : \"Duration(ms) of flash/signal\"\n                },\n                \"baseFlashInterval\" : {\n                    \"value\" : baseFlashInterval,\n                    \"unit\" : \"ms\",\n                    \"description\" : \"Base duration between each signal\"\n                },\n                \"jitterBase\" : {\n                    \"value\" : jitterBase,\n                    \"unit\" : \"ms\",\n                    \"description\" : \"Base(added) duration between each signal\"\n                },\n                \"jitterAmplitude\" : {\n                    \"value\" : jitterAmplitude,\n                    \"unit\": \"ms\",\n                    \"description\" : \"Added jittering amplitude of time between each signal\"\n                },\n                \"timeOffset\" : {\n                    \"value\" : timeOffset,\n                    \"unit\": \"ms\",\n                    \"description\" : \"Negative time offset to reduce time before first signal (Deduct from jittered timeout)\"\n                }\n            },\n            \"description\" : \"Default Go-Nogo Configuration\"\n        }\n        return gameLogicSchemeResult;\n    }\n\n    function createProgressBar(id, duration) {\n        let progressBar = document.getElementById(id);\n        let progressBarInner = document.createElement('div');\n        progressBarInner.className = 'inner';\n    \n        progressBarInner.style.animationDuration = duration;\n    \n        if (progressBar) {\n            progressBar.hidden = false;\n            if (progressBar.firstChild) {\n                progressBar.removeChild(progressBar.firstChild);\n            }\n            progressBar.className = 'progressbar';\n            progressBar.appendChild(progressBarInner);\n        }\n    \n        progressBarInner.style.animationPlayState = 'running';\n    }\n\n    function popColor(popTime, intervalTime, colors) {\n        let progressBar = document.getElementById('progressBar');\n        progressBar?.classList.add('show-block');\n        for (let iSeq = 0; iSeq < trialNumber; iSeq++) {\n            if (colors[iSeq] === 0) {\n                timeoutList.push(\n                    setTimeout(function () {\n                        let end = endTime();\n                        allTimePop.push(end);\n                        allColorPop.push(restColor);\n                        allTimeEvent.push(thisTime());\n                        currEventId = 0;\n                        falseClicked = false;\n                    }, (iSeq * intervalTime) + Jitter[iSeq])\n                )\n            } else if (colors[iSeq] === 1) {\n                timeoutList.push(\n                    setTimeout(function () {\n                        let end = endTime();\n                        setCircleBtnClass(\"green\")\n                        allTimePop.push(end);\n                        allColorPop.push(goSignalColor);\n                        allTimeEvent.push(thisTime());\n                        currEventId = 1;\n                        haveToClick = false;\n                    }, (iSeq * intervalTime) + Jitter[iSeq])\n                )\n\n                timeoutList.push(\n                    setTimeout(function () {\n                        let end = endTime();\n                        setCircleBtnClass(\"\")\n                    }, popTime + (iSeq * intervalTime) + Jitter[iSeq])\n                )\n\n                timeoutList.push(\n                    setTimeout(function () {\n                        if (haveToClick === false) {\n                            correctCountForCombo = 0;\n                            missCount++;\n                        }\n                    }, (iSeq + 1) * intervalTime + Jitter[iSeq + 1] - timeOffset)\n                )\n            } else if (colors[iSeq] === 2) {\n                timeoutList.push(\n                    setTimeout(function () {\n                        let end = endTime();\n                        setCircleBtnClass(\"red\")\n                        allTimePop.push(end);\n                        allColorPop.push(noGoSignalColor);\n                        allTimeEvent.push(thisTime());\n                        currEventId = 2;\n                        falseClicked = false;\n                    }, (iSeq * intervalTime) + Jitter[iSeq])\n                )\n\n                timeoutList.push(\n                    setTimeout(function () {\n                        let end = endTime();\n                        setCircleBtnClass(\"\")\n                    }, popTime + (iSeq * intervalTime) + Jitter[iSeq])\n                )\n            }\n        }\n        runIsOver(popTime + ((trialNumber - 1) * intervalTime) + Jitter[trialNumber - 1] + 200)\n    }\n\n    function runIsOver(waitTheWholeTime: number) {\n        timeoutList.push(\n            setTimeout(function () {\n                testEnd.push(endTime());\n                if (haveDone === false) {\n                    haveDone = true;\n                    checkAllAns();\n                    Done();\n                }\n            }, waitTheWholeTime)\n        )\n    }\n\n    function scoringData(rtBound, trialNumber, score){\n        scoringDataResult = [{\n            \"scoringModel\" : {\n                \"scoringName\" : \"default\",\n                \"parameters\" : {\n                    \"rtBound\" : {\n                        \"value\" : rtBound,\n                        \"unit\" : null,\n                        \"description\" : \"rtBound - hitRt = rtScore\"\n                    },\n                    \"trialNumber\" : {\n                        \"value\" : trialNumber,\n                        \"unit\" : null,\n                        \"description\" : \"Total number of signal\"\n                    }\n\n                },\n                \"description\" : `score = sum of the scorePerTrial if comboCount = [1, 2, 3, 4] -> comboMultiplier = [1, 1.5, 3, 5]`\n            },\n            \"score\" : score\n        }]\n        return scoringDataResult;\n    }\n\n    function metricData(hitCount, missCount, correctRejectionCount, falseAlarmCount, falseSignalRejectionCount, falseHitCount, hitRt, avgHitRt, avgFalseHitRt){\n        hitRt.sort((a,b) => a-b);\n        let metricName \n            = ['correctCount', \n               'incorrectCount', \n               'hitCount', \n               'missCount', \n               'correctRejectionCount', \n               'falseAlarmCount', \n               'falseSignalRejectionCount', \n               'falseHitCount',\n               'hitAccuracy',\n               'falseSignalRejectionAccuracy', \n               'fastestHitReactionTime', \n               'averageHitReactionTime',\n               'averageFalseHitReactionTime'];\n        let metricValue \n            = [hitCount + correctRejectionCount + falseSignalRejectionCount, \n               missCount + falseAlarmCount + falseHitCount, \n               hitCount, \n               missCount, \n               correctRejectionCount, \n               falseAlarmCount, \n               falseSignalRejectionCount, \n               falseHitCount,\n               (hitCount / allGo) * 100,\n               (falseSignalRejectionCount / allNoGo) * 100, \n               hitRt[0], \n               avgHitRt,\n               avgFalseHitRt];\n        let metricUnit = [null, null, null, null, null, null, null, null, '%', '%', 'ms', 's', 's'];\n        let metricDescription \n            = ['Total number of correct trials', \n               'Total number of incorrect trials', \n               'Total number of hit trials', \n               'Total number of miss trials', \n               'Total number of correct rejection trials', \n               'Total number of false alarm trials',\n               'Total number of rejection incorrect signal trials', \n               'Total number of hit on incorrect signal trials',\n               'The accuracy of hit',\n               'The accuracy of false signal rejection', \n               'The fastest hit reaction time that user reached', \n               'The average of all hit reaction time',\n               'The average of all hit on incorrect signal reaction time'];\n        for (let i = 0; i < metricName.length; i++){\n            let obj_to_append\n            obj_to_append = {\n                \"metricName\" : metricName[i],\n                \"value\" : metricValue[i],\n                \"unit\" : metricUnit[i],\n                \"description\" : metricDescription[i]\n            }\n            metricDataResult.push(obj_to_append);\n        }   \n        return metricDataResult;\n    }\n\n    function cueData(allColorPop, allTimeEvent) {\n        for (let i = 0; i < allColorPop.length; i++){\n            let obj_to_append;\n            obj_to_append = {\n                \"cueEvent\" : allColorPop[i],\n                \"cueStart\" : allTimeEvent[i],\n            }\n            cueDataResult.push(obj_to_append);\n        }\n        return cueDataResult;\n    }\n\n    function userInteractionData(allInteractionEvent, allClickEvent) {\n        for (let i = 0; i < allInteractionEvent.length; i++){\n            let obj_to_append;\n            obj_to_append = {\n                \"interactionEvent\" : allInteractionEvent[i],\n                \"timestamp\" : allClickEvent[i],\n            }\n            userInteractionDataResult.push(obj_to_append);\n        }\n        return userInteractionDataResult;\n    }\n\n    function postEntry(cueDataResult, userInteractionDataResult, gameLogicSchemeResult, scoringDataResult, metricDataResult) {\n        postEntryResult = {\n            \"date\" : `${thisTime().toString()}`,\n            \"userId\" : props.userId,\n            \"userPhone\" : props.userPhone,\n            \"userSession\" : props.userSession,\n            \"data\" : {\n                \"rawData\" : {\n                    \"cueData\" : cueDataResult,\n                    \"userInteractionData\" : userInteractionDataResult\n                },\n                \"gameLogicScheme\" : gameLogicSchemeResult,\n                \"scoringData\" : scoringDataResult,\n                \"metricData\" : metricDataResult\n            }\n        }\n        return postEntryResult;\n    }\n\n    function checkAllAns() {\n        for (let popIndex = 0; popIndex < allColorPop.length; popIndex++) {\n            let currColorPop = allColorPop[popIndex];\n            let currTimePop = allTimePop[popIndex];\n            let satisfied = false;\n            let nextTimePop: any = testEnd\n            if (popIndex < allColorPop.length - 1) {\n                nextTimePop = allTimePop[popIndex + 1];\n            }\n            let currRt;\n            for (let rtIndex = latestRtIndex; rtIndex < rt.length; rtIndex++) {\n                currRt = rt[rtIndex];\n                latestRtIndex = rtIndex;\n                if (currRt < currTimePop) {\n                    continue;\n                } else if ((currRt >= currTimePop) && (currRt < nextTimePop)) {\n                    if (satisfied === false) {\n                        if (currColorPop === goSignalColor) {\n                            hitRt.push(currRt - currTimePop.getTime());\n                        } else if (currColorPop === noGoSignalColor) {\n                            falseHitRt.push(currRt - currTimePop.getTime());\n                        }\n                        satisfied = true;\n                    }\n                } else {\n                    break;\n                }\n            }\n        }\n        getSummaryScore();\n    }\n\n    function getSummaryScore() {\n        for (let correctIndex = latestHitRtIndex; correctIndex < comboCount.length; correctIndex++) {\n            latestHitRtIndex = correctIndex;\n            let rtScore = rtBound - hitRt[correctIndex];\n            if (comboCount[correctIndex] === 1) {\n                rtScore *= 1;\n            } else if (comboCount[correctIndex] === 2) {\n                rtScore *= 1.5;\n            } else if (comboCount[correctIndex] === 3) {\n                rtScore *= 3;\n            } else if (comboCount[correctIndex] === 4) {\n                rtScore *= 5;\n            }\n            scorePerTrial.push(rtScore);\n        }\n\n        if (hitRt.length !== 0){\n            sumHitRt = hitRt.reduce((sum, score) => {\n                return sum + score;\n            });\n        } else {\n            hitRt.push(0);\n            sumHitRt = hitRt;\n        }\n\n        avgHitRt = sumHitRt / 1000 / hitRt.length;\n\n        if (falseHitRt.length !== 0){\n            sumFalseHitRt = falseHitRt.reduce((sum, score) => {\n                return sum + score;\n            });\n        } else {\n            falseHitRt.push(0);\n            sumFalseHitRt = falseHitRt;\n        }\n\n        avgFalseHitRt = sumFalseHitRt / 1000 / falseHitRt.length;\n        \n        if (scorePerTrial.length !== 0){\n            total = scorePerTrial.reduce((sum, score) => {\n                return sum + score;\n            });\n        } else {\n          scorePerTrial.push(0);\n        }\n\n        return total;\n    }\n\n    function checkResp() {\n        // clickSound();\n        if (currEventId === 1) {\n            if (haveToClick === false) {\n                haveToClick = true;\n                if (correctCountForCombo === 5) {\n                    correctCountForCombo = 5;\n                } else {\n                    correctCountForCombo++;\n                }\n                if (correctCountForCombo === 1) {\n                    comboCount.push(1);\n                    // combo1Sound();\n                } else if (correctCountForCombo === 2) {\n                    comboCount.push(1);\n                    // combo2Sound();\n                } else if (correctCountForCombo === 3) {\n                    comboCount.push(2);\n                    // combo3Sound();\n                } else if (correctCountForCombo === 4) {\n                    comboCount.push(3);\n                    // combo3Sound();\n                } else if (correctCountForCombo === 5) {\n                    comboCount.push(4);\n                    // combo3Sound();\n                }\n                hitCount++;\n            }\n        } else {\n            if (falseClicked === false) {\n                correctCountForCombo = 0;\n                // losingSound();\n                falseClicked = true;\n                if (currEventId === 0) {\n                    falseAlarmCount++;\n                    if (correctRejectionCount > 0) {\n                        correctRejectionCount--;\n                    }\n                }\n                if (currEventId === 2) {\n                    falseHitCount++;\n                    if (falseSignalRejectionCount > 0) {\n                        falseSignalRejectionCount--;\n                    }\n                }\n            }\n        }\n    }\n\n    function Done() {\n        setIsItDone(true);\n        setHardGNGDone(true);\n        score = Math.max(10000, Math.round(total));\n        cueDataResult = cueData(allColorPop, allTimeEvent);\n        userInteractionDataResult = userInteractionData(allInteractionEvent, allClickEvent);\n        scoringDataResult = scoringData(rtBound, trialNumber, score);\n        metricDataResult = metricData(hitCount, missCount, correctRejectionCount, falseAlarmCount, falseSignalRejectionCount, falseHitCount, hitRt, avgHitRt, avgFalseHitRt);\n        postEntryResult = postEntry(cueDataResult, userInteractionDataResult, gameLogicSchemeResult, scoringDataResult, metricDataResult);\n        axios.post('https://exercise-vercel-svelte-backend.vercel.app/api/hard/gonogo', postEntryResult)\n            .then(function (postEntryResult) {\n                console.log(postEntryResult)\n            })\n            .catch(function (error) {\n                console.log('error')\n            });\n        saveJSONDataToClientDevice(postEntryResult, `Subject${props.userId}_gonogo_hard_session${props.userSession}_${thisTime().toString()}`);\n    }\n\n    function touchStart() {\n        let end = endTime();\n        allInteractionEvent.push('mouse-down');\n        allClickEvent.push(thisTime());\n        setBtnOnClicked(true);\n        rt.push(end.getTime());\n        checkResp();\n    }\n\n    function touchEnd() {\n        let end = endTime();\n        allInteractionEvent.push('mouse-up');\n        allClickEvent.push(thisTime());\n        setBtnOnClicked(false);\n    }\n\n    function refreshPage(){\n        window.location.reload();\n    } \n\n    function backToLandingPage() {\n        navigate('/landing');\n        refreshPage();\n    }\n\n    return (\n        <div className='container-fluid'>\n        <div className='row'>\n            <div className='py-4 px-12 sm:py-8 w-full bg-blue-100 shadow-md'>\n              {<BreadCrumb />}\n            </div>\n            <div id='GNGGameBody' className='col'>\n            <div className=\"GNGGameBodyProgressBar\">\n                <div className=\"progressBarContainer\">\n                    <div id='progressBar' hidden></div>\n                </div>\n            </div>\n              <div className=\"GNGGameWindow\">\n                {<GNGWindow touchStart={touchStart} touchEnd={touchEnd} btnOnClicked={btnOnClicked} circleBtnClass={circleBtnClass}/>}\n              </div>\n              <div className=\"GNGGameEnterButton\"></div>\n            </div>\n        </div>\n        {isItDone ? \n        <div>\n            {<ScoreSummaryOverlay accuracy={(hitCount / allGo) * 100}  falseHit={(falseHitCount / allNoGo) * 100} avgHitRt={avgHitRt} hardGNGDone={hardGNGDone} refreshPage={refreshPage} backToLandingPage={backToLandingPage}/>}\n        </div>\n        : null}\n        {<RotateAlert />}\n    </div>\n    )\n}\nexport default GNGGame;\n\nfunction endTime() {\n    let d = new Date();\n    return d;\n}\n\nfunction thisTime() {\n    let thisTime = moment().format('YYYY-MM-DDTkk:mm:ss.SSSSSS');\n    return thisTime;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}